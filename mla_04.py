# -*- coding: utf-8 -*-
"""MLA_04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CqygSbVrBG8sIY6Iht0P4nSYjpAXJUe0

**MACHINE LEARNING ALGORITHM | PRACTICAL - 04**

**AIM:** Given the following data, which specify classifications for nine combinations of VAR1
and VAR2 predict a classification for a case where VAR1=0.906 and VAR2=0.606,
using the result of k-means clustering with 3 means (i.e., 3centroids)
VAR1 VAR2 CLASS
1.713 1.586 0
0.180 1.786 1
0.353 1.240 1
0.940 1.566 0
1.486 0.759 1
1.266 1.106 0
1.540 0.419 1
0.459 1.799 1
0.773 0.186 1
"""

import numpy as np
from sklearn.cluster import KMeans

# Step 1: Define the given data
data = np.array([[1.713, 1.586],
                 [0.180, 1.786],
                 [0.353, 1.240],
                 [0.940, 1.566],
                 [1.486, 0.759],
                 [1.266, 1.106],
                 [1.540, 0.419],
                 [0.459, 1.799],
                 [0.773, 0.186]])

labels = np.array([0, 1, 1, 0, 1, 0, 1, 1, 1])

# Step 2: Create a KMeans clustering model with 3 clusters
k = 3
model = KMeans(n_clusters=k, random_state=42)
model.fit(data)

# Step 3: Predict the classification for the new case [0.906, 0.606]
new_case = np.array([[0.906, 0.606]])
predicted_cluster = model.predict(new_case)

# Step 4: Determine the majority class label for the predicted cluster
cluster_labels = labels[model.labels_ == predicted_cluster]
predicted_class = np.bincount(cluster_labels).argmax()

# Step 5: Print the predicted class
print("Predicted class:", predicted_class)